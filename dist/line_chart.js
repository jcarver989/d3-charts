// Generated by CoffeeScript 1.10.0
var LineChart,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LineChart = (function(superClass) {
  extend(LineChart, superClass);

  function LineChart(selector, options) {
    if (options == null) {
      options = {};
    }
    this.render = bind(this.render, this);
    LineChart.__super__.constructor.call(this, selector, options);
    this.line = d3.svg.line().x(this.scales.scaleX).y(this.scales.scaleY);
    this.area = d3.svg.area().x(this.scales.scaleX).y(this.scales.scaleY);
    d3.select(window).on('resize', this.render);
  }

  LineChart.prototype.enterLines = function(enter) {
    return enter.append("path").attr("class", function(line) {
      return "line " + line.label;
    });
  };

  LineChart.prototype.enterAreas = function(enter) {
    return enter.filter(function(line) {
      return line.area === true;
    }).append("path").attr("class", function(line) {
      return "area " + line.label;
    });
  };

  LineChart.prototype.createTooltip = function() {
    var tip;
    tip = (this.tip || (this.tip = new Tooltip(document)));
    this.dots.on("mouseover", function(d) {
      tip.html(d[1]);
      return tip.show(this);
    });
    return this.dots.on("mouseout", function(d) {
      return tip.hide();
    });
  };

  LineChart.prototype.render = function(isUpdate) {
    if (isUpdate == null) {
      isUpdate = true;
    }
    if (isUpdate) {
      this.updateDimensions();
    }
    this.axes.draw(this.width, this.height);
    this.lines.attr("d", (function(_this) {
      return function(line) {
        _this.line.interpolate(_this.chooseInterpolation(line));
        return _this.line(line.data);
      };
    })(this));
    this.area.y0(this.height);
    this.areas.attr("d", (function(_this) {
      return function(line) {
        _this.area.interpolate(_this.chooseInterpolation(line));
        return _this.area(line.data);
      };
    })(this));
    return this.dots.attr("cx", this.scales.scaleX).attr("cy", this.scales.scaleY);
  };

  LineChart.prototype.chooseInterpolation = function(line) {
    if (line.smooth) {
      return "monotone";
    } else {
      return "linear";
    }
  };

  LineChart.prototype.draw = function(lines) {
    var allPoints, line, newGroups;
    allPoints = d3.merge((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = lines.length; i < len; i++) {
        line = lines[i];
        results.push(line.data);
      }
      return results;
    })());
    this.scales.setDomains(allPoints);
    this.lineGroups = this.svg.chart.selectAll(".lineGroup").data(lines, function(line) {
      return line.label;
    });
    newGroups = this.lineGroups.enter().append("g").attr("class", "lineGroup");
    this.enterLines(newGroups);
    this.enterAreas(newGroups);
    this.lines = this.lineGroups.selectAll(".line");
    this.areas = this.lineGroups.selectAll(".area");
    this.dotGroups = this.svg.chart.selectAll(".dotGroup").data(lines, function(line) {
      return line.label;
    });
    this.dotGroups.enter().append("g").attr("class", "dotGroup");
    this.dots = this.dotGroups.selectAll(".dot").data(function(line) {
      var d, i, len, ref, results;
      if (line.dots === false) {
        return [];
      }
      ref = line.data;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        d = ref[i];
        results.push([d[0], d[1], line.label]);
      }
      return results;
    });
    this.dots.enter().append("circle").attr("class", function(d) {
      return "dot " + d[2];
    }).attr("r", this.options.dotSize);
    if (this.options.tooltips) {
      this.createTooltip();
    }
    return this.render(false);
  };

  return LineChart;

})(AbstractChart);
